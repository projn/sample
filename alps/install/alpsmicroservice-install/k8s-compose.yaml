apiVersion: v1
kind: Namespace
metadata:
  name: alps

---

# openssl genrsa -out tls.key 2048
# openssl req -new -x509 -key tls.key -out tls.crt -days 3650
# kubectl create secret tls alps-certs --cert=tls.crt --key=tls.key -n alps
#apiVersion: v1
#kind: Secret
#metadata:
#  labels:
#    k8s-app: alps-app
#  name: alps-certs
#  namespace: alps
#type: Opaque

---

kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: alps-app
  name: alps-service
  namespace: alps
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    k8s-app: alps-app

---

kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    k8s-app: alps-app
  name: alps-settings
  namespace: alps

---

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: alps-app
  name: alps-user
  namespace: alps

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: alps-app
  name: alps-role
  namespace: alps
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["alps-certs"]
    verbs: ["get"]
    # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["alps-settings"]
    verbs: ["get", "update"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    k8s-app: alps-app
  name: alps-role-binding
  namespace: alps
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: alps-role
subjects:
  - kind: ServiceAccount
    name: alps-user
    namespace: alps

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: alps-app
  name: alps-app
  namespace: alps
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: alps-app
  template:
    metadata:
      labels:
        k8s-app: alps-app
    spec:
      containers:
        - name: alps-server
          image: tomcat:8.0.50-jre8-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              protocol: TCP
          volumeMounts:
            - name: alps-certs
              mountPath: /opt/software   #/alpsmicroservice/context/keystore
            - name: log
              mountPath: /var/log/alpsmicroservice
            #- name: glusterfs-volume
            #  mountPath: /var/data
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 5443
            initialDelaySeconds: 30
            timeoutSeconds: 30
      volumes:
        - name: alps-certs
          secret:
            secretName: alps-certs
        - name: log
          hostPath:
            path: /var/log
        #- name: glusterfs-volume
        #  persistentVolumeClaim:
        #    claimName: glusterfs-pvc
      serviceAccountName: alps-user
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule

---

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: alps-ingress
  namespace: alps
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    - alps.projn.com
    secretName: alps-certs
  rules:
  - host: alps.projn.com
    http:
      paths:
      - path: /
        backend:
          serviceName: alps-service
          servicePort: 8080

---
